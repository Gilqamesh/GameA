#ifndef RAYLIB_WRAPPER_HPP
#define RAYLIB_WRAPPER_HPP

#include "types.hpp"
#include <string>

using namespace std;

struct Vector2;             // Vector2 type
struct Vector3;             // Vector3 type
struct Vector4;             // Vector4 type
typedef Vector4 Quaternion; // Quaternion type
struct Matrix;              // Matrix type (OpenGL style 4x4)
struct Color;               // Color type, RGBA (32bit)
struct Rec;                 // Rec type

struct Image; // Image type (multiple pixel formats supported)
              // NOTE: Data stored in CPU memory (RAM)
struct Texture;
typedef Texture Texture2D; // Texture type (multiple internal formats supported)
                           // NOTE: Data stored in GPU memory (VRAM)
typedef Texture2D TextureCubemap;
struct RenderTexture;
typedef RenderTexture RenderTexture2D; // RenderTexture type, for texture rendering
struct NPatchInfo;                     // N-Patch layout info
struct GlyphInfo;                      // Font character glyph info
struct Font;                           // Font type, includes texture and chars data

struct Camera3D;
typedef Camera3D Camera; // Camera type, defines 3d camera position/orientation
struct Camera2D;         // Camera2D type, defines a 2d camera
struct Mesh;             // Vertex data definning a mesh
struct Shader;           // Shader type (generic shader)
struct MaterialMap;      // Material texture map
struct Material;         // Material type
struct Model;            // Basic 3d Model type
struct Transform;        // Transformation (used for bones)
struct BoneInfo;         // Bone information
struct ModelAnimation;   // Model animation data (bones and frames)
struct Ray;              // Ray type (useful for raycast)
struct RayCollision;     // Raycast hit information
struct BoundingBox;      // Bounding box type for 3d mesh

struct Wave;        // Wave type, defines audio wave data
struct Sound;       // Basic Sound source and buffer
struct Music;       // Music type (file streaming from memory)
struct AudioStream; // Raw audio stream type

struct VrDeviceInfo;   // VR device parameters
struct VrStereoConfig; // VR Stereo rendering configuration for simulator

struct FilePathList; // File path list

struct game_window;
struct game_memory;
struct game_windows;

struct RayCollision;
struct AudioStream;

typedef void (*TraceLogCallback)(int logType, const char *text, va_list args);
typedef void (*AudioCallback)(void *bufferData, unsigned int frames);

// core

typedef void (*rl_init_window)(i32, i32, const char *);
typedef b32 (*rl_window_should_close)(void);
typedef void (*rl_close_window)(void);
typedef b32 (*rl_is_window_ready)(void);
typedef b32 (*rl_is_window_fullscreen)(void);
typedef b32 (*rl_is_window_hidden)(void);
typedef b32 (*rl_is_window_minimized)(void);
typedef b32 (*rl_is_window_maximized)(void);
typedef b32 (*rl_is_window_focused)(void);
typedef b32 (*rl_is_window_resized)(void);
typedef b32 (*rl_is_window_state)(u32);
typedef void (*rl_set_window_state)(u32);
typedef void (*rl_clear_window_state)(u32);
typedef void (*rl_toggle_fullscreen)(void);
typedef void (*rl_maximize_window)(void);
typedef void (*rl_minimize_window)(void);
typedef void (*rl_restore_window)(void);
typedef void (*rl_set_window_icon)(Image);
typedef void (*rl_set_window_title)(const char *);
typedef void (*rl_set_window_position)(i32, i32);
typedef void (*rl_set_window_monitor)(i32);
typedef void (*rl_set_window_min_size)(i32, i32);
typedef void (*rl_set_window_size)(i32, i32);
typedef void (*rl_set_window_opacity)(r32);
typedef void *(*rl_get_window_handle)(void);
typedef i32 (*rl_get_screen_width)(void);
typedef i32 (*rl_get_screen_height)(void);
typedef i32 (*rl_get_render_width)(void);
typedef i32 (*rl_get_render_height)(void);
typedef i32 (*rl_get_monitor_count)(void);
typedef i32 (*rl_get_current_monitor)(void);
typedef Vector2 (*rl_get_monitor_position)(i32);
typedef i32 (*rl_get_monitor_width)(i32);
typedef i32 (*rl_get_monitor_height)(i32);
typedef i32 (*rl_get_monitor_physical_width)(i32);
typedef i32 (*rl_get_monitor_physical_height)(i32);
typedef i32 (*rl_get_monitor_refresh_rate)(i32);
typedef Vector2 (*rl_get_window_position)(void);
typedef Vector2 (*rl_get_window_scale_dpi)(void);
typedef const char *(*rl_get_monitor_name)(i32);
typedef void (*rl_set_clipboard_text)(const char *);
typedef const char *(*rl_get_clipboard_text)(void);
typedef void (*rl_enable_event_waiting)(void);
typedef void (*rl_disable_event_waiting)(void);
typedef void (*rl_swap_screen_buffer)(void);
typedef void (*rl_poll_input_events)(void);
typedef void (*rl_wait_time)(r64);
typedef void (*rl_show_cursor)(void);
typedef void (*rl_hide_cursor)(void);
typedef b32 (*rl_is_cursor_hidden)(void);
typedef void (*rl_enable_cursor)(void);
typedef void (*rl_disable_cursor)(void);
typedef b32 (*rl_is_cursor_on_screen)(void);
typedef void (*rl_clear_background)(Color);
typedef void (*rl_begin_drawing)();
typedef void (*rl_end_drawing)(void);
typedef void (*rl_begin_mode_2d)(Camera2D);
typedef void (*rl_end_mode_2d)(void);
typedef void (*rl_begin_mode_3d)(Camera3D);
typedef void (*rl_end_mode_3d)(void);
typedef void (*rl_begin_texture_mode)(RenderTexture2D);
typedef void (*rl_end_texture_mode)(void);
typedef void (*rl_begin_shader_mode)(Shader);
typedef void (*rl_end_shader_mode)(void);
typedef void (*rl_begin_blend_mode)(i32);
typedef void (*rl_end_blend_mode)(void);
typedef void (*rl_begin_scissor_mode)(i32, i32, i32, i32);
typedef void (*rl_end_scissor_mode)(void);
typedef Shader (*rl_load_shader)(const char *, const char *);
typedef Shader (*rl_load_shader_from_memory)(const char *, const char *);
typedef i32 (*rl_get_shader_location)(Shader, const char *);
typedef i32 (*rl_get_shader_location_attrib)(Shader, const char *);
typedef void (*rl_set_shader_value)(Shader, i32, const void *, i32);
typedef void (*rl_set_shader_value_v)(Shader, i32, const void *, i32, i32);
typedef void (*rl_set_shader_value_matrix)(Shader, i32, Matrix);
typedef void (*rl_set_shader_value_texture)(Shader, i32, Texture2D);
typedef void (*rl_unload_shader)(Shader);
typedef Ray (*rl_get_mouse_ray)(Vector2, Camera);
typedef Matrix (*rl_get_camera_matrix)(Camera);
typedef Matrix (*rl_get_camera_matrix_2d)(Camera2D);
typedef Vector2 (*rl_get_world_to_screen)(Vector3, Camera);
typedef Vector2 (*rl_get_screen_to_world_2d)(Vector2, Camera2D);
typedef Vector2 (*rl_get_world_to_screen_ex)(Vector3, Camera, i32, i32);
typedef Vector2 (*rl_get_world_to_screen_2d)(Vector2, Camera2D);
typedef void (*rl_set_target_fps)(i32);
typedef i32 (*rl_get_fps)(void);
typedef r32 (*rl_get_frame_time)(void);
typedef r64 (*rl_get_time)(void);
typedef i32 (*rl_get_random_value)(i32, i32);
typedef void (*rl_set_random_seed)(u32);
typedef void (*rl_take_screenshot)(const char *);
typedef void (*rl_set_config_flags)(u32);
typedef void (*rl_set_trace_log_level)(i32);
typedef void *(*rl_mem_alloc)(i32);
typedef void *(*rl_mem_realloc)(void *, i32);
typedef void (*rl_mem_free)(void *);
typedef void (*rl_open_url)(const char *);
typedef void (*rl_set_trace_log_callback)(TraceLogCallback);
typedef unsigned char *(*rl_load_file_data)(const char *, u32 *);
typedef void (*rl_unload_file_data)(unsigned char *);
typedef b32 (*rl_save_file_data)(const char *, void *, u32);
typedef b32 (*rl_export_data_as_code)(const char *, u32, const char *);
typedef char *(*rl_load_file_text)(const char *);
typedef void (*rl_unload_file_text)(char *);
typedef b32 (*rl_save_file_text)(const char *, char *);
typedef b32 (*rl_file_exists)(const char *);
typedef b32 (*rl_directory_exists)(const char *);
typedef b32 (*rl_is_file_extension)(const char *, const char *);
typedef i32 (*rl_get_file_length)(const char *);
typedef const char *(*rl_get_file_extension)(const char *);
typedef const char *(*rl_get_file_name)(const char *);
typedef const char *(*rl_get_file_name_without_ext)(const char *);
typedef const char *(*rl_get_directory_path)(const char *);
typedef const char *(*rl_get_prev_directory_path)(const char *);
typedef const char *(*rl_get_working_directory)(void);
typedef const char *(*rl_get_application_directory)(void);
typedef b32 (*rl_change_directory)(const char *);
typedef b32 (*rl_is_path_file)(const char *);
typedef FilePathList (*rl_load_directory_files)(const char *);
typedef FilePathList (*rl_load_directory_files_ex)(const char *, const char *, b32);
typedef void (*rl_unload_directory_files)(FilePathList);
typedef b32 (*rl_is_file_dropped)(void);
typedef FilePathList (*rl_load_dropped_files)(void);
typedef void (*rl_unload_dropped_files)(FilePathList);
typedef long (*rl_get_file_mod_time)(const char *);
typedef unsigned char *(*rl_compress_data)(unsigned char *, i32, i32 *);
typedef unsigned char *(*rl_decompress_data)(unsigned char *, i32, i32 *);
typedef char *(*rl_encode_data_base64)(const unsigned char *, i32, i32 *);
typedef unsigned char *(*rl_decode_data_base64)(const unsigned char *, i32 *);
typedef b32 (*rl_is_key_pressed)(i32);
typedef b32 (*rl_is_key_down)(i32);
typedef b32 (*rl_is_key_released)(i32);
typedef b32 (*rl_is_key_up)(i32);
typedef void (*rl_set_exit_key)(i32);
typedef i32 (*rl_get_key_pressed)(void);
typedef i32 (*rl_get_char_pressed)(void);
typedef b32 (*rl_is_gamepad_available)(i32);
typedef const char *(*rl_get_gamepad_name)(i32);
typedef b32 (*rl_is_gamepad_button_pressed)(i32, i32);
typedef b32 (*rl_is_gamepad_button_down)(i32, i32);
typedef b32 (*rl_is_gamepad_button_released)(i32, i32);
typedef b32 (*rl_is_gamepad_button_up)(i32, i32);
typedef i32 (*rl_get_gamepad_button_pressed)(void);
typedef i32 (*rl_get_gamepad_axis_count)(i32);
typedef r32 (*rl_get_gamepad_axis_movement)(i32, i32);
typedef i32 (*rl_set_gamepad_mappings)(const char *);
typedef b32 (*rl_is_mouse_button_pressed)(i32);
typedef b32 (*rl_is_mouse_button_down)(i32);
typedef b32 (*rl_is_mouse_button_released)(i32);
typedef b32 (*rl_is_mouse_button_up)(i32);
typedef i32 (*rl_get_mouse_x)(void);
typedef i32 (*rl_get_mouse_y)(void);
typedef Vector2 (*rl_get_mouse_position)(void);
typedef Vector2 (*rl_get_mouse_delta)(void);
typedef void (*rl_set_mouse_position)(i32, i32);
typedef void (*rl_set_mouse_offset)(i32, i32);
typedef void (*rl_set_mouse_scale)(r32, r32);
typedef r32 (*rl_get_mouse_wheel_move)(void);
typedef Vector2 (*rl_get_mouse_wheel_move_v)(void);
typedef void (*rl_set_mouse_cursor)(i32);
typedef i32 (*rl_get_touch_x)(void);
typedef i32 (*rl_get_touch_y)(void);
typedef Vector2 (*rl_get_touch_position)(i32);
typedef i32 (*rl_get_touch_point_id)(i32);
typedef i32 (*rl_get_touch_point_count)(void);
typedef void (*rl_set_gestures_enabled)(u32);
typedef b32 (*rl_is_gesture_detected)(i32);
typedef i32 (*rl_get_gesture_detected)(void);
typedef r32 (*rl_get_gesture_hold_duration)(void);
typedef Vector2 (*rl_get_gesture_drag_vector)(void);
typedef r32 (*rl_get_gesture_drag_angle)(void);
typedef Vector2 (*rl_get_gesture_pinch_vector)(void);
typedef r32 (*rl_get_gesture_pinch_angle)(void);
typedef void (*rl_set_camera_mode)(Camera, i32);
typedef void (*rl_update_camera)(Camera *);
typedef void (*rl_set_camera_pan_control)(i32);
typedef void (*rl_set_camera_alt_control)(i32);
typedef void (*rl_set_camera_smooth_zoom_control)(i32);
typedef void (*rl_set_camera_move_controls)(i32, i32, i32, i32, i32, i32);

// shape drawing

typedef void (*rl_set_shapes_texture)(Texture2D, Rec);
typedef void (*rl_draw_pixel)(i32, i32, Color);
typedef void (*rl_draw_pixel_v)(Vector2, Color);
typedef void (*rl_draw_line)(i32, i32, i32, i32, Color);
typedef void (*rl_draw_line_v)(Vector2, Vector2, Color);
typedef void (*rl_draw_line_ex)(Vector2, Vector2, r32, Color);
typedef void (*rl_draw_line_bezier)(Vector2, Vector2, r32, Color);
typedef void (*rl_draw_line_bezier_quad)(Vector2, Vector2, Vector2, r32, Color);
typedef void (*rl_draw_line_bezier_cubic)(Vector2, Vector2, Vector2, Vector2, r32, Color);
typedef void (*rl_draw_line_strip)(Vector2*, i32, Color);
typedef void (*rl_draw_circle)(i32, i32, r32, Color);
typedef void (*rl_draw_circle_sector)(Vector2, r32, r32, r32, i32, Color);
typedef void (*rl_draw_circle_sector_lines)(Vector2, r32, r32, r32, i32, Color);
typedef void (*rl_draw_circle_gradient)(i32, i32, r32, Color, Color);
typedef void (*rl_draw_circle_v)(Vector2, r32, Color);
typedef void (*rl_draw_circle_lines)(i32, i32, r32, Color);
typedef void (*rl_draw_ellipse)(i32, i32, r32, r32, Color);
typedef void (*rl_draw_ellipse_lines)(i32, i32, r32, r32, Color);
typedef void (*rl_draw_ring)(Vector2, r32, r32, r32, r32, i32, Color);
typedef void (*rl_draw_ring_lines)(Vector2, r32, r32, r32, r32, i32, Color);
typedef void (*rl_draw_rectangle)(i32, i32, i32, i32, Color);
typedef void (*rl_draw_rectangle_v)(Vector2, Vector2, Color);
typedef void (*rl_draw_rectangle_rec)(Rec, Color);
typedef void (*rl_draw_rectangle_pro)(Rec, Vector2, r32, Color);
typedef void (*rl_draw_rectangle_gradient_v)(i32, i32, i32, i32, Color, Color);
typedef void (*rl_draw_rectangle_gradident_h)(i32, i32, i32, i32, Color, Color);
typedef void (*rl_draw_rectangle_gradient_ex)(Rec, Color, Color, Color, Color);
typedef void (*rl_draw_rectangle_lines)(i32, i32, i32, i32, Color);
typedef void (*rl_draw_rectangle_lines_ex)(Rec, r32, Color);
typedef void (*rl_draw_rectange_rounded)(Rec, r32, i32, Color);
typedef void (*rl_draw_rectangle_bounded_lines)(Rec, r32, i32, r32, Color);
typedef void (*rl_draw_triangle)(Vector2, Vector2, Vector2, Color);
typedef void (*draw_triangle_rotated)(Vector2, Vector2, Vector2, Vector2, r32, Color);
typedef void (*rl_draw_triangle_lines)(Vector2, Vector2, Vector2, Color);
typedef void (*draw_triangle_lines_rotated)(Vector2, Vector2, Vector2, Vector2, r32, Color);
typedef void (*rl_draw_triangle_fan)(Vector2 *, i32, Color);
typedef void (*rl_draw_triangle_strip)(Vector2 *, i32, Color);
typedef void (*draw_polygon)(Vector2*, u32, Color);
typedef void (*rl_draw_poly)(Vector2, i32, r32, r32, Color);
typedef void (*rl_draw_poly_lines)(Vector2, i32, r32, r32, Color);
typedef void (*rl_draw_poly_lines_ex)(Vector2, i32, r32, r32, r32, Color);
typedef b32 (*rl_check_collision_recs)(Rec, Rec);
typedef b32 (*rl_check_collision_circles)(Vector2, r32, Vector2, r32);
typedef b32 (*rl_check_collision_circle_rec)(Vector2, r32, Rec);
typedef b32 (*rl_check_collision_point_rec)(Vector2, Rec);
typedef b32 (*rl_check_collision_point_circle)(Vector2, Vector2, r32);
typedef b32 (*rl_check_collision_point_triangle)(Vector2, Vector2, Vector2, Vector2);
typedef b32 (*rl_check_collision_lines)(Vector2, Vector2, Vector2, Vector2, Vector2 *);
typedef b32 (*rl_check_collision_point_line)(Vector2, Vector2, Vector2, i32);
typedef Rec (*rl_get_collision_rec)(Rec, Rec);

// textures

typedef Image (*rl_load_image)(const char *);
typedef Image (*rl_load_image_raw)(const char *, i32, i32, i32, i32);
typedef Image (*rl_load_image_anim)(const char *, i32 *);
typedef Image (*rl_load_image_from_memory)(const char *, const unsigned char *, i32);
typedef Image (*rl_load_image_from_texture)(Texture2D);
typedef Image (*rl_load_image_from_screen)(void);
typedef void (*rl_unload_image)(Image);
typedef b32 (*rl_export_image)(Image, const char *);
typedef b32 (*rl_export_image_as_code)(Image, const char *);
typedef Image (*rl_gen_image_color)(i32, i32, Color);
typedef Image (*rl_gen_image_gradient_v)(i32, i32, Color, Color);
typedef Image (*rl_gen_image_gradient_h)(i32, i32, Color, Color);
typedef Image (*rl_gen_image_gradient_radial)(i32, i32, r32, Color, Color);
typedef Image (*rl_gen_image_checked)(i32, i32, i32, i32, Color, Color);
typedef Image (*rl_gen_image_white_noise)(i32, i32, r32);
typedef Image (*rl_gen_image_cellular)(i32, i32, i32);
typedef Image (*rl_image_copy)(Image);
typedef Image (*rl_image_from_image)(Image, Rec);
typedef Image (*rl_image_text)(const char *, i32, Color);
typedef Image (*rl_image_text_ex)(Font, const char *, r32, r32, Color);
typedef void (*rl_image_format)(Image *, i32);
typedef void (*rl_image_to_pot)(Image *, Color);
typedef void (*rl_image_crop)(Image *, Rec);
typedef void (*rl_image_alpha_crop)(Image *, r32);
typedef void (*rl_image_alpha_clear)(Image *, Color, r32);
typedef void (*rl_image_alpha_mask)(Image *, Image);
typedef void (*rl_image_alpha_premultiply)(Image *);
typedef void (*rl_image_resize)(Image *, i32, i32);
typedef void (*rl_image_resize_nn)(Image *, i32, i32);
typedef void (*rl_image_resize_canvas)(Image *, i32, i32, i32, i32, Color);
typedef void (*rl_image_mipmaps)(Image*);
typedef void (*rl_image_dither)(Image *, i32, i32, i32, i32);
typedef void (*rl_image_flip_vertical)(Image *);
typedef void (*rl_image_flip_horizontal)(Image *);
typedef void (*rl_image_rotate_cw)(Image *);
typedef void (*rl_image_rotate_ccw)(Image *);
typedef void (*rl_image_color_tint)(Image *, Color);
typedef void (*rl_image_color_invert)(Image *);
typedef void (*rl_image_color_grayscale)(Image *);
typedef void (*rl_image_color_contrast)(Image *, r32);
typedef void (*rl_image_color_brightness)(Image *, i32);
typedef void (*rl_image_color_replace)(Image *, Color, Color);
typedef Color *(*rl_load_image_colors)(Image);
typedef Color *(*rl_load_image_palette)(Image, i32, i32 *);
typedef void (*rl_unload_image_colors)(Color *);
typedef void (*rl_unload_image_palette)(Color *);
typedef Rec (*rl_get_image_alpha_border)(Image, r32);
typedef Color (*rl_get_image_color)(Image, i32, i32);
typedef void (*rl_image_clear_background)(Image *, Color);
typedef void (*rl_image_draw_pixel)(Image *, i32, i32, Color);
typedef void (*rl_image_draw_pixel_v)(Image *, Vector2, Color);
typedef void (*rl_image_draw_line)(Image *, i32, i32, i32, i32, Color);
typedef void (*rl_image_draw_line_v)(Image *, Vector2, Vector2, Color);
typedef void (*rl_image_draw_circle)(Image *, i32, i32, i32, Color);
typedef void (*rl_image_draw_circle_v)(Image *, Vector2, i32, Color);
typedef void (*rl_image_draw_rec)(Image *, i32, i32, i32, i32, Color);
typedef void (*rl_image_draw_rec_v)(Image *, Vector2, Vector2, Color);
typedef void (*rl_image_draw_rec_rec)(Image *, Rec, Color);
typedef void (*rl_image_draw_rec_lines)(Image *, Rec, i32, Color);
typedef void (*rl_image_draw)(Image *, Image, Rec, Rec, Color);
typedef void (*rl_image_draw_text)(Image *, const char *, i32, i32, i32, Color);
typedef void (*rl_image_draw_text_ex)(Image *, Font, const char *, Vector2, r32, r32, Color);
typedef Texture2D (*rl_load_texture)(const char *);
typedef Texture2D (*rl_load_texture_from_image)(Image);
typedef TextureCubemap (*rl_load_texture_cubemap)(Image, i32);
typedef RenderTexture2D (*rl_load_render_texture)(i32, i32);
typedef void (*rl_unload_texture)(Texture2D);
typedef void (*rl_unload_render_texture)(RenderTexture2D);
typedef void (*rl_update_texture)(Texture2D, const void *);
typedef void (*rl_update_texture_rec)(Texture2D, Rec, const void *);
typedef void (*rl_gen_texture_mipmaps)(Texture2D *);
typedef void (*rl_set_texture_filter)(Texture2D, i32);
typedef void (*rl_set_texture_wrap)(Texture2D, i32);
typedef void (*draw_render_texture)(RenderTexture2D);
typedef void (*rl_draw_texture)(Texture2D, i32, i32, Color);
typedef void (*rl_draw_texture_v)(Texture2D, Vector2, Color);
typedef void (*rl_draw_texture_ex)(Texture2D, Vector2, r32, r32, Color);
typedef void (*draw_texture_rotated_scaled)(Texture2D, Vector2, Vector2, r32, r32, Color);
typedef void (*draw_texture_rotated)(Texture2D, Vector2, Vector2, r32, Color);
typedef void (*rl_draw_texture_rec)(Texture2D, Rec, Vector2, Color);
typedef void (*rl_draw_texture_quad)(Texture2D, Vector2, Vector2, Rec, Color);
typedef void (*rl_draw_texture_tiled)(Texture2D, Rec, Rec, Vector2, r32, r32, Color);
typedef void (*rl_draw_texture_pro)(Texture2D, Rec, Rec, Vector2, r32, Color);
typedef void (*rl_draw_texture_n_patch)(Texture2D, NPatchInfo, Rec, Vector2, r32, Color);
typedef void (*rl_draw_texture_poly)(Texture2D, Vector2, Vector2 *, Vector2 *, i32, Color);
typedef Color (*rl_fade)(Color, r32);
typedef i32 (*rl_color_to_int)(Color);
typedef Vector4 (*rl_color_normalize)(Color);
typedef Color (*rl_color_from_normalized)(Vector4);
typedef Vector3 (*rl_color_to_hsv)(Color);
typedef Color (*rl_color_from_hsv)(r32, r32, r32);
typedef Color (*rl_color_alpha)(Color, r32);
typedef Color (*rl_color_alpha_blend)(Color, Color, Color);
typedef Color (*rl_get_color)(u32);
typedef Color (*rl_get_pixel_color)(void *, i32);
typedef void (*rl_set_pixel_color)(void *, Color, i32);
typedef i32 (*rl_get_pixel_data_size)(i32, i32, i32);

// text

typedef Font (*rl_get_font_default)(void);
typedef Font (*rl_load_font)(const char *);
typedef Font (*rl_load_font_ex)(const char *, i32, i32 *, i32);
typedef Font (*rl_load_font_from_image)(Image, Color, i32);
typedef Font (*rl_load_font_from_memory)(const char *, const unsigned char *, i32, i32, i32 *, i32);
typedef GlyphInfo *(*rl_load_font_data)(const unsigned char *, i32, i32, i32 *, i32, i32);
typedef Image (*rl_gen_image_font_atlas)(const GlyphInfo *, Rec **, i32, i32, i32, i32);
typedef void (*rl_unload_font_data)(GlyphInfo *, i32);
typedef void (*rl_unload_font)(Font);
typedef b32 (*rl_export_font_as_code)(Font, const char *);
typedef void (*rl_draw_fps)(i32, i32);
typedef void (*rl_draw_text)(const string &, i32, i32, i32, Color);
typedef void (*rl_draw_text_ex)(Font, const string &, Vector2, r32, r32, Color);
typedef void (*rl_draw_text_pro)(Font, const string &, Vector2, Vector2, r32, r32, r32, Color);
typedef void (*rl_draw_text_codepoint)(Font, i32, Vector2, r32, Color);
typedef void (*rl_draw_text_codepoints)(Font, const i32 *, i32, Vector2, r32, r32, Color);
typedef i32 (*rl_measure_text)(const char *, i32);
typedef Vector2 (*rl_measure_text_ex)(Font, const char *, r32, r32);
typedef i32 (*rl_get_glyph_index)(Font, i32);
typedef GlyphInfo (*rl_get_glyph_info)(Font, i32);
typedef Rec (*rl_get_glyph_atlas_rec)(Font, i32);
typedef i32 *(*rl_load_codepoints)(const char *, i32 *);
typedef void (*rl_unload_codepoints)(i32 *);
typedef i32 (*rl_get_codepoint_count)(const char *);
typedef i32 (*rl_get_codepoint)(const char *, i32 *);
typedef const char *(*rl_codepoint_to_utf8)(i32, i32 *);
typedef char *(*rl_text_codepoints_to_utf8)(const i32 *, i32);
typedef i32 (*rl_text_copy)(char *, const char *);
typedef b32 (*rl_text_is_equal)(const char *, const char *);
typedef u32 (*rl_text_length)(const char *);
typedef const char *(*rl_text_subtext)(const char *, i32, i32);
typedef char *(*rl_text_replace)(char *, const char *, const char *);
typedef char *(*rl_text_insert)(const char *, const char *, i32);
typedef const char *(*rl_text_join)(const char **, i32, const char *);
typedef const char **(*rl_text_split)(const char *, char, i32 *);
typedef void (*rl_text_append)(char *, const char *, i32 *);
typedef i32 (*rl_text_find_index)(const char *, const char *);
typedef const char *(*rl_text_to_upper)(const char *);
typedef const char *(*rl_text_to_lower)(const char *);
typedef const char *(*rl_text_to_pascal)(const char *);
typedef i32 (*rl_text_to_integer)(const char *);

// models

typedef void (*rl_draw_line_3d)(Vector3, Vector3, Color);
typedef void (*rl_draw_point_3d)(Vector3, Color);
typedef void (*rl_draw_circle_3d)(Vector3, r32, Vector3, r32, Color);
typedef void (*rl_draw_triangle_3d)(Vector3, Vector3, Vector3, Color);
typedef void (*rl_draw_triangle_strip_3d)(Vector3 *, i32, Color);
typedef void (*rl_draw_cube)(Vector3, r32, r32, r32, Color);
typedef void (*rl_draw_cube_v)(Vector3, Vector3, Color);
typedef void (*rl_draw_cube_wires)(Vector3, r32, r32, r32, Color);
typedef void (*rl_draw_cube_wires_v)(Vector3, Vector3, Color);
typedef void (*rl_draw_cube_texture)(Texture2D, Vector3, r32, r32, r32, Color);
typedef void (*rl_draw_cube_texture_rec)(Texture2D, Rec, Vector3, r32, r32, r32, Color);
typedef void (*rl_draw_sphere)(Vector3, r32, Color);
typedef void (*rl_draw_sphere_ex)(Vector3, r32, i32, i32, Color);
typedef void (*rl_draw_sphere_wires)(Vector3, r32, i32, i32, Color);
typedef void (*rl_draw_cylinder)(Vector3, r32, r32, r32, i32, Color);
typedef void (*rl_draw_cylinder_ex)(Vector3, Vector3, r32, r32, i32, Color);
typedef void (*rl_draw_cylinder_wires)(Vector3, r32, r32, r32, i32, Color);
typedef void (*rl_draw_cylinder_wires_ex)(Vector3, Vector3, r32, r32, i32, Color);
typedef void (*rl_draw_plane)(Vector3, Vector2, Color);
typedef void (*rl_draw_ray)(Ray, Color);
typedef void (*rl_draw_grid)(i32, r32);
typedef Model (*rl_load_model)(const char *);
typedef Model (*rl_load_model_from_mesh)(Mesh);
typedef void (*rl_unload_model)(Model);
typedef void (*rl_unload_model_keep_meshes)(Model);
typedef BoundingBox (*rl_get_model_bounding_box)(Model);
typedef void (*rl_draw_model)(Model, Vector3, r32, Color);
typedef void (*rl_draw_model_ex)(Model, Vector3, Vector3, r32, Vector3, Color);
typedef void (*rl_draw_model_wires)(Model, Vector3, r32, Color);
typedef void (*rl_draw_model_wires_ex)(Model, Vector3, Vector3, r32, Vector3, Color);
typedef void (*rl_draw_bounding_box)(BoundingBox, Color);
typedef void (*rl_draw_billboard)(Camera3D, Texture2D, Vector3, r32, Color);
typedef void (*rl_draw_billboard_rec)(Camera, Texture2D, Rec, Vector3, Vector2, Color);
typedef void (*rl_draw_billboard_pro)(Camera, Texture2D, Rec, Vector3, Vector3, Vector2, Vector2, r32, Color);
typedef void (*rl_upload_mesh)(Mesh *, b32);
typedef void (*rl_update_mesh_buffer)(Mesh, i32, const void *, i32, i32);
typedef void (*rl_unload_mesh)(Mesh);
typedef void (*rl_draw_mesh)(Mesh, Material, Matrix);
typedef void (*rl_draw_mesh_instanced)(Mesh, Material, const Matrix *, i32);
typedef b32 (*rl_export_mesh)(Mesh, const char *);
typedef BoundingBox (*rl_get_mesh_bounding_box)(Mesh);
typedef void (*rl_get_mesh_tangents)(Mesh *);
typedef Mesh (*rl_gen_mesh_poly)(i32, r32);
typedef Mesh (*rl_get_mesh_plane)(r32, r32, i32, i32);
typedef Mesh (*rl_gen_mesh_cube)(r32, r32, r32);
typedef Mesh (*rl_mesh_sphere)(r32, i32, i32);
typedef Mesh (*rl_gen_mesh_hemi_sphere)(r32, i32, i32);
typedef Mesh (*rl_gen_mesh_cylinder)(r32, r32, i32);
typedef Mesh (*rl_gen_mesh_cone)(r32, r32, i32);
typedef Mesh (*rl_gen_mesh_torus)(r32, r32, i32, i32);
typedef Mesh (*rl_gen_mesh_knot)(r32, r32, i32, i32);
typedef Mesh (*rl_gen_mesh_heightmap)(Image, Vector3);
typedef Mesh (*rl_gen_mesh_cubicmap)(Image, Vector3);
typedef Material *(*rl_load_materials)(const char *, i32 *);
typedef Material (*rl_load_material_default)(void);
typedef void (*rl_unload_material)(Material);
typedef void (*rl_set_material_texture)(Material *, i32, Texture2D);
typedef void (*rl_set_model_mesh_material)(Model *, i32, i32);
typedef ModelAnimation *(*rl_load_model_animations)(const char *, u32 *);
typedef void (*rl_update_model_animation)(Model, ModelAnimation, i32);
typedef void (*rl_unload_model_animation)(ModelAnimation);
typedef void (*rl_unload_model_animations)(ModelAnimation *, u32);
typedef b32 (*rl_is_model_animation_valid)(Model, ModelAnimation);
typedef b32 (*rl_check_collision_spheres)(Vector3, r32, Vector3, r32);
typedef b32 (*rl_check_collision_boxes)(BoundingBox, BoundingBox);
typedef b32 (*rl_check_collision_box_sphere)(BoundingBox, Vector3, r32);
typedef RayCollision (*rl_get_ray_collision_sphere)(Ray, Vector3, r32);
typedef RayCollision (*rl_get_ray_collision_box)(Ray, BoundingBox);
typedef RayCollision (*rl_get_ray_collision_mesh)(Ray, Mesh, Matrix);
typedef RayCollision (*rl_get_ray_collision_triangle)(Ray, Vector3, Vector3, Vector3);
typedef RayCollision (*rl_get_ray_collision_quad)(Ray, Vector3, Vector3, Vector3, Vector3);

// audio

typedef void (*rl_init_audio_device)(void);
typedef void (*rl_close_audio_device)(void);
typedef b32 (*rl_is_audio_device_ready)(void);
typedef void (*rl_set_master_volume)(r32);
typedef Wave (*rl_load_wave)(const char *);
typedef Wave (*rl_load_wave_from_memory)(const char *, const unsigned char *, i32);
typedef Sound (*rl_load_sound)(const char *);
typedef Sound (*rl_load_sound_from_wave)(Wave);
typedef void (*rl_update_sound)(Sound, const void *, i32);
typedef void (*rl_unload_wave)(Wave);
typedef void (*rl_unload_sound)(Sound);
typedef b32 (*rl_export_wave)(Wave, const char *);
typedef b32(*rl_export_wave_as_code)(Wave, const char*);
typedef void (*rl_play_sound)(Sound);
typedef void (*rl_stop_sound)(Sound);
typedef void (*rl_pause_sound)(Sound);
typedef void (*rl_resume_sound)(Sound);
typedef void (*rl_play_sound_multi)(Sound);
typedef void (*rl_stop_sound_multi)(void);
typedef i32 (*rl_get_sounds_playing)(void);
typedef b32 (*rl_is_sound_playing)(Sound);
typedef void (*rl_set_sound_volume)(Sound, r32);
typedef void (*rl_set_sound_pitch)(Sound, r32);
typedef void (*rl_set_sound_pan)(Sound, r32);
typedef Wave (*rl_wave_copy)(Wave);
typedef void (*rl_wave_crop)(Wave *, i32, i32);
typedef void (*rl_wave_format)(Wave *, i32, i32, i32);
typedef r32 *(*rl_load_wave_samples)(Wave);
typedef void (*rl_unload_wave_samples)(r32 *);
typedef Music (*rl_load_music_stream)(const char *);
typedef Music (*rl_load_music_stream_from_memory)(const char *, const unsigned char *, i32);
typedef void (*rl_unload_music_stream)(Music);
typedef void (*rl_play_music_stream)(Music);
typedef b32 (*rl_is_music_stream_playing)(Music);
typedef void (*rl_update_music_stream)(Music);
typedef void (*rl_stop_music_stream)(Music);
typedef void (*rl_pause_music_stream)(Music);
typedef void (*rl_resume_music_stream)(Music);
typedef void (*rl_seek_music_stream)(Music, r32);
typedef void (*rl_set_music_volume)(Music, r32);
typedef void (*rl_set_music_pitch)(Music, r32);
typedef void (*rl_set_music_pan)(Music, r32);
typedef r32 (*rl_get_music_time_length)(Music);
typedef r32 (*rl_get_music_time_played)(Music);
typedef AudioStream (*rl_load_audio_stream)(u32, u32, u32);
typedef void (*rl_unload_audio_stream)(AudioStream);
typedef void (*rl_update_audio_stream)(AudioStream, const void *, i32);
typedef b32 (*rl_is_audio_stream_processed)(AudioStream);
typedef void (*rl_play_audio_stream)(AudioStream);
typedef void (*rl_pause_audio_stream)(AudioStream);
typedef void (*rl_resume_audio_stream)(AudioStream);
typedef b32 (*rl_is_audio_stream_playing)(AudioStream);
typedef void (*rl_stop_audio_stream)(AudioStream);
typedef void (*rl_set_audio_stream_volume)(AudioStream, r32);
typedef void (*rl_set_audio_stream_pitch)(AudioStream, r32);
typedef void (*rl_set_audio_stream_pan)(AudioStream, r32);
typedef void (*rl_set_audio_stream_buffer_size_default)(i32);
typedef void (*rl_set_audio_stream_callback)(AudioStream, AudioCallback);
typedef void (*rl_attach_audio_stream_processor)(AudioStream, AudioCallback);
typedef void (*rl_detach_audio_stream_processor)(AudioStream, AudioCallback);

struct raylib_wrapper_code
{
    rl_init_window InitWindow;
    rl_window_should_close WindowShouldClose;
    rl_close_window CloseWindow;
    rl_is_window_ready IsWindowReady;
    rl_is_window_fullscreen IsWindowFullscreen;
    rl_is_window_hidden IsWindowHidden;
    rl_is_window_minimized IsWindowMinimized;
    rl_is_window_maximized IsWindowMaximized;
    rl_is_window_focused IsWindowFocused;
    rl_is_window_resized IsWindowResized;
    rl_is_window_state IsWindowState;
    rl_set_window_state SetWindowState;
    rl_clear_window_state ClearWindowState;
    rl_toggle_fullscreen ToggleFullscreen;
    rl_maximize_window MaximizeWindow;
    rl_minimize_window MinimizeWindow;
    rl_restore_window RestoreWindow;
    rl_set_window_icon SetWindowIcon;
    rl_set_window_title SetWindowTitle;
    rl_set_window_position SetWindowPosition;
    rl_set_window_monitor SetWindowMonitor;
    rl_set_window_min_size SetWindowMinSize;
    rl_set_window_size SetWindowSize;
    rl_set_window_opacity SetWindowOpacity;
    rl_get_window_handle GetWindowHandle;
    rl_get_screen_width GetScreenWidth;
    rl_get_screen_height GetScreenHeight;
    rl_get_render_width GetRenderWidth;
    rl_get_render_height GetRenderHeight;
    rl_get_monitor_count GetMonitorCount;
    rl_get_current_monitor GetCurrentMonitor;
    rl_get_monitor_position GetMonitorPosition;
    rl_get_monitor_width GetMonitorWidth;
    rl_get_monitor_height GetMonitorHeight;
    rl_get_monitor_physical_width GetMonitorPhysicalWidth;
    rl_get_monitor_physical_height GetMonitorPhysicalHeight;
    rl_get_monitor_refresh_rate GetMonitorRefreshRate;
    rl_get_window_position GetWindowPosition;
    rl_get_window_scale_dpi GetWindowScaleDPI;
    rl_get_monitor_name GetMonitorName;
    rl_set_clipboard_text SetClipboardText;
    rl_get_clipboard_text GetClipboardText;
    rl_enable_event_waiting EnableEventWaiting;
    rl_disable_event_waiting DisableEventWaiting;
    rl_swap_screen_buffer SwapScreenBuffer;
    rl_poll_input_events PollInputEvents;
    rl_wait_time WaitTime;
    rl_show_cursor ShowCursor;
    rl_hide_cursor HideCursor;
    rl_is_cursor_hidden IsCursorHidden;
    rl_enable_cursor EnableCursor;
    rl_disable_cursor DisableCursor;
    rl_is_cursor_on_screen IsCursorOnScreen;
    rl_clear_background ClearBackground;
    rl_begin_drawing BeginDrawing;
    rl_end_drawing EndDrawing;
    rl_begin_mode_2d BeginMode2D;
    rl_end_mode_2d EndMode2D;
    rl_begin_mode_3d BeginMode3D;
    rl_end_mode_3d EndMode3D;
    rl_begin_texture_mode BeginTextureMode;
    rl_end_texture_mode EndTextureMode;
    rl_begin_shader_mode BeginShaderMode;
    rl_end_shader_mode EndShaderMode;
    rl_begin_blend_mode BeginBlendMode;
    rl_end_blend_mode EndBlendMode;
    rl_begin_scissor_mode BeginScissorMode;
    rl_end_scissor_mode EndScissorMode;
    rl_load_shader LoadShader;
    rl_load_shader_from_memory LoadShaderFromMemory;
    rl_get_shader_location GetShaderLocation;
    rl_get_shader_location_attrib GetShaderLocationAttrib;
    rl_set_shader_value SetShaderValue;
    rl_set_shader_value_v SetShaderValueV;
    rl_set_shader_value_matrix SetShaderValueMatrix;
    rl_set_shader_value_texture SetShaderValueTexture;
    rl_unload_shader UnloadShader;
    rl_get_mouse_ray GetMouseRay;
    rl_get_camera_matrix GetCameraMatrix;
    rl_get_camera_matrix_2d GetCameraMatrix2D;
    rl_get_world_to_screen GetWorldToScreen;
    rl_get_screen_to_world_2d GetScreenToWorld2D;
    rl_get_world_to_screen_ex GetWorldToScreenEx;
    rl_get_world_to_screen_2d GetWorldToScreen2D;
    rl_set_target_fps SetTargetFPS;
    rl_get_fps GetFPS;
    rl_get_frame_time GetFrameTime;
    rl_get_time GetTime;
    rl_get_random_value GetRandomValue;
    rl_set_random_seed SetRandomSeed;
    rl_take_screenshot TakeScreenshot;
    rl_set_config_flags SetConfigFlags;
    rl_set_trace_log_level SetTraceLogLevel;
    rl_mem_alloc MemAlloc;
    rl_mem_realloc MemRealloc;
    rl_mem_free MemFree;
    rl_open_url OpenURL;
    rl_set_trace_log_callback SetTraceLogCallback;
    rl_load_file_data LoadFileData;
    rl_unload_file_data UnloadFileData;
    rl_save_file_data SaveFileData;
    rl_export_data_as_code ExportDataAsCode;
    rl_load_file_text LoadFileText;
    rl_unload_file_text UnloadFileText;
    rl_save_file_text SaveFileText;
    rl_file_exists FileExists;
    rl_directory_exists DirectoryExists;
    rl_is_file_extension IsFileExtension;
    rl_get_file_length GetFileLength;
    rl_get_file_extension GetFileExtension;
    rl_get_file_name GetFileName;
    rl_get_file_name_without_ext GetFileNameWithoutExt;
    rl_get_directory_path GetDirectoryPath;
    rl_get_prev_directory_path GetPrevDirectoryPath;
    rl_get_working_directory GetWorkingDirectory;
    rl_get_application_directory GetApplicationDirectory;
    rl_change_directory ChangeDirectory;
    rl_is_path_file IsPathFile;
    rl_load_directory_files LoadDirectoryFiles;
    rl_load_directory_files_ex LoadDirectoryFilesEx;
    rl_unload_directory_files UnloadDirectoryFiles;
    rl_is_file_dropped IsFileDropped;
    rl_load_dropped_files LoadDroppedFiles;
    rl_unload_dropped_files UnloadDroppedFiles;
    rl_get_file_mod_time GetFileModTime;
    rl_compress_data CompressData;
    rl_decompress_data DecompressData;
    rl_encode_data_base64 EncodeDataBase64;
    rl_decode_data_base64 DecodeDataBase64;
    rl_is_key_pressed IsKeyPressed;
    rl_is_key_down IsKeyDown;
    rl_is_key_released IsKeyReleased;
    rl_is_key_up IsKeyUp;
    rl_set_exit_key SetExitKey;
    rl_get_key_pressed GetKeyPressed;
    rl_get_char_pressed GetCharPressed;
    rl_is_gamepad_available IsGamepadAvailable;
    rl_get_gamepad_name GetGamepadName;
    rl_is_gamepad_button_pressed IsGamepadButtonPressed;
    rl_is_gamepad_button_down IsGamepadButtonDown;
    rl_is_gamepad_button_released IsGamepadButtonReleased;
    rl_is_gamepad_button_up IsGamepadButtonUp;
    rl_get_gamepad_button_pressed GetGamepadButtonPressed;
    rl_get_gamepad_axis_count GetGamepadAxisCount;
    rl_get_gamepad_axis_movement GetGamepadAxisMovement;
    rl_set_gamepad_mappings SetGamepadMappings;
    rl_is_mouse_button_pressed IsMouseButtonPressed;
    rl_is_mouse_button_down IsMouseButtonDown;
    rl_is_mouse_button_released IsMouseButtonReleased;
    rl_is_mouse_button_up IsMouseButtonUp;
    rl_get_mouse_x GetMouseX;
    rl_get_mouse_y GetMouseY;
    rl_get_mouse_position GetMousePosition;
    rl_get_mouse_delta GetMouseDelta;
    rl_set_mouse_position SetMousePosition;
    rl_set_mouse_offset SetMouseOffset;
    rl_set_mouse_scale SetMouseScale;
    rl_get_mouse_wheel_move GetMouseWheelMove;
    rl_get_mouse_wheel_move_v GetMouseWheelMoveV;
    rl_set_mouse_cursor SetMouseCursor;
    rl_get_touch_x GetTouchX;
    rl_get_touch_y GetTouchY;
    rl_get_touch_position GetTouchPosition;
    rl_get_touch_point_id GetTouchPointId;
    rl_get_touch_point_count GetTouchPointCount;
    rl_set_gestures_enabled SetGesturesEnabled;
    rl_is_gesture_detected IsGestureDetected;
    rl_get_gesture_detected GetGestureDetected;
    rl_get_gesture_hold_duration GetGestureHoldDuration;
    rl_get_gesture_drag_vector GetGestureDragVector;
    rl_get_gesture_drag_angle GetGestureDragAngle;
    rl_get_gesture_pinch_vector GetGesturePinchVector;
    rl_get_gesture_pinch_angle GetGesturePinchAngle;
    rl_set_camera_mode SetCameraMode;
    rl_update_camera UpdateCamera;
    rl_set_camera_pan_control SetCameraPanControl;
    rl_set_camera_alt_control SetCameraAltControl;
    rl_set_camera_smooth_zoom_control SetCameraSmoothZoomControl;
    rl_set_camera_move_controls SetCameraMoveControls;
    rl_set_shapes_texture SetShapesTexture;
    rl_draw_pixel DrawPixel;
    rl_draw_pixel_v DrawPixelV;
    rl_draw_line DrawLine;
    rl_draw_line_v DrawLineV;
    rl_draw_line_ex DrawLineEx;
    rl_draw_line_bezier DrawLineBezier;
    rl_draw_line_bezier_quad DrawLineBezierQuad;
    rl_draw_line_bezier_cubic DrawLineBezierCubic;
    rl_draw_line_strip DrawLineStrip;
    rl_draw_circle DrawCircle;
    rl_draw_circle_sector DrawCircleSector;
    rl_draw_circle_sector_lines DrawCircleSectorLines;
    rl_draw_circle_gradient DrawCircleGradient;
    rl_draw_circle_v DrawCircleV;
    rl_draw_circle_lines DrawCircleLines;
    rl_draw_ellipse DrawEllipse;
    rl_draw_ellipse_lines DrawEllipseLines;
    rl_draw_ring DrawRing;
    rl_draw_ring_lines DrawRingLines;
    rl_draw_rectangle DrawRectangle;
    rl_draw_rectangle_v DrawRectangleV;
    rl_draw_rectangle_rec DrawRectangleRec;
    rl_draw_rectangle_pro DrawRectanglePro;
    rl_draw_rectangle_gradient_v DrawRectangleGradientV;
    rl_draw_rectangle_gradident_h DrawRectangleGradientH;
    rl_draw_rectangle_gradient_ex DrawRectangleGradientEx;
    rl_draw_rectangle_lines DrawRectangleLines;
    rl_draw_rectangle_lines_ex DrawRectangleLinesEx;
    rl_draw_rectange_rounded DrawRectangleRounded;
    rl_draw_rectangle_bounded_lines DrawRectangleRoundedLines;
    rl_draw_triangle DrawTriangle;
    draw_triangle_rotated DrawTriangleRotated;
    rl_draw_triangle_lines DrawTriangleLines;
    draw_triangle_lines_rotated DrawTriangleLinesRotated;
    rl_draw_triangle_fan DrawTriangleFan;
    rl_draw_triangle_strip DrawTriangleStrip;
    draw_polygon DrawPolygon;
    rl_draw_poly DrawPoly;
    rl_draw_poly_lines DrawPolyLines;
    rl_draw_poly_lines_ex DrawPolyLinesEx;
    rl_check_collision_recs CheckCollisionRecs;
    rl_check_collision_circles CheckCollisionCircles;
    rl_check_collision_circle_rec CheckCollisionCircleRec;
    rl_check_collision_point_rec CheckCollisionPointRec;
    rl_check_collision_point_circle CheckCollisionPointCircle;
    rl_check_collision_point_triangle CheckCollisionPointTriangle;
    rl_check_collision_lines CheckCollisionLines;
    rl_check_collision_point_line CheckCollisionPointLine;
    rl_get_collision_rec GetCollisionRec;
    rl_load_image RL_LoadImage;
    rl_load_image_raw LoadImageRaw;
    rl_load_image_anim LoadImageAnim;
    rl_load_image_from_memory LoadImageFromMemory;
    rl_load_image_from_texture LoadImageFromTexture;
    rl_load_image_from_screen LoadImageFromScreen;
    rl_unload_image UnloadImage;
    rl_export_image ExportImage;
    rl_export_image_as_code ExportImageAsCode;
    rl_gen_image_color GenImageColor;
    rl_gen_image_gradient_v GenImageGradientV;
    rl_gen_image_gradient_h GenImageGradientH;
    rl_gen_image_gradient_radial GenImageGradientRadial;
    rl_gen_image_checked GenImageChecked;
    rl_gen_image_white_noise GenImageWhiteNoise;
    rl_gen_image_cellular GenImageCellular;
    rl_image_copy ImageCopy;
    rl_image_from_image ImageFromImage;
    rl_image_text ImageText;
    rl_image_text_ex ImageTextEx;
    rl_image_format ImageFormat;
    rl_image_to_pot ImageToPOT;
    rl_image_crop ImageCrop;
    rl_image_alpha_crop ImageAlphaCrop;
    rl_image_alpha_clear ImageAlphaClear;
    rl_image_alpha_mask ImageAlphaMask;
    rl_image_alpha_premultiply ImageAlphaPremultiply;
    rl_image_resize ImageResize;
    rl_image_resize_nn ImageResizeNN;
    rl_image_resize_canvas ImageResizeCanvas;
    rl_image_mipmaps ImageMipmaps;
    rl_image_dither ImageDither;
    rl_image_flip_vertical ImageFlipVertical;
    rl_image_flip_horizontal ImageFlipHorizontal;
    rl_image_rotate_cw ImageRotateCW;
    rl_image_rotate_ccw ImageRotateCCW;
    rl_image_color_tint ImageColorTint;
    rl_image_color_invert ImageColorInvert;
    rl_image_color_grayscale ImageColorGrayscale;
    rl_image_color_contrast ImageColorContrast;
    rl_image_color_brightness ImageColorBrightness;
    rl_image_color_replace ImageColorReplace;
    rl_load_image_colors LoadImageColors;
    rl_load_image_palette LoadImagePalette;
    rl_unload_image_colors UnloadImageColors;
    rl_unload_image_palette UnloadImagePalette;
    rl_get_image_alpha_border GetImageAlphaBorder;
    rl_get_image_color GetImageColor;
    rl_image_clear_background ImageClearBackground;
    rl_image_draw_pixel ImageDrawPixel;
    rl_image_draw_pixel_v ImageDrawPixelV;
    rl_image_draw_line ImageDrawLine;
    rl_image_draw_line_v ImageDrawLineV;
    rl_image_draw_circle ImageDrawCircle;
    rl_image_draw_circle_v ImageDrawCircleV;
    rl_image_draw_rec ImageDrawRectangle;
    rl_image_draw_rec_v ImageDrawRectangleV;
    rl_image_draw_rec_rec ImageDrawRectangleRec;
    rl_image_draw_rec_lines ImageDrawRectangleLines;
    rl_image_draw ImageDraw;
    rl_image_draw_text ImageDrawText;
    rl_image_draw_text_ex ImageDrawTextEx;
    rl_load_texture LoadTexture;
    rl_load_texture_from_image LoadTextureFromImage;
    rl_load_texture_cubemap LoadTextureCubemap;
    rl_load_render_texture LoadRenderTexture;
    rl_unload_texture UnloadTexture;
    rl_unload_render_texture UnloadRenderTexture;
    rl_update_texture UpdateTexture;
    rl_update_texture_rec UpdateTextureRec;
    rl_gen_texture_mipmaps GenTextureMipmaps;
    rl_set_texture_filter SetTextureFilter;
    rl_set_texture_wrap SetTextureWrap;
    draw_render_texture DrawRenderTexture;
    rl_draw_texture DrawTexture;
    rl_draw_texture_v DrawTextureV;
    rl_draw_texture_ex DrawTextureEx;
    draw_texture_rotated_scaled DrawTextureRotatedScaled;
    draw_texture_rotated DrawTextureRotated;
    rl_draw_texture_rec DrawTextureRec;
    rl_draw_texture_quad DrawTextureQuad;
    rl_draw_texture_tiled DrawTextureTiled;
    rl_draw_texture_pro DrawTexturePro;
    rl_draw_texture_n_patch DrawTextureNPatch;
    rl_draw_texture_poly DrawTexturePoly;
    rl_fade Fade;
    rl_color_to_int ColorToInt;
    rl_color_normalize ColorNormalize;
    rl_color_from_normalized ColorFromNormalized;
    rl_color_to_hsv ColorToHSV;
    rl_color_from_hsv ColorFromHSV;
    rl_color_alpha ColorAlpha;
    rl_color_alpha_blend ColorAlphaBlend;
    rl_get_color GetColor;
    rl_get_pixel_color GetPixelColor;
    rl_set_pixel_color SetPixelColor;
    rl_get_pixel_data_size GetPixelDataSize;
    rl_get_font_default GetFontDefault;
    rl_load_font LoadFont;
    rl_load_font_ex LoadFontEx;
    rl_load_font_from_image LoadFontFromImage;
    rl_load_font_from_memory LoadFontFromMemory;
    rl_load_font_data LoadFontData;
    rl_gen_image_font_atlas GenImageFontAtlas;
    rl_unload_font_data UnloadFontData;
    rl_unload_font UnloadFont;
    rl_export_font_as_code ExportFontAsCode;
    rl_draw_fps DrawFPS;
    rl_draw_text RL_DrawText;
    rl_draw_text_ex RL_DrawTextEx;
    rl_draw_text_pro DrawTextPro;
    rl_draw_text_codepoint DrawTextCodepoint;
    rl_draw_text_codepoints DrawTextCodepoints;
    rl_measure_text MeasureText;
    rl_measure_text_ex MeasureTextEx;
    rl_get_glyph_index GetGlyphIndex;
    rl_get_glyph_info GetGlyphInfo;
    rl_get_glyph_atlas_rec GetGlyphAtlasRec;
    rl_load_codepoints LoadCodepoints;
    rl_unload_codepoints UnloadCodepoints;
    rl_get_codepoint_count GetCodepointCount;
    rl_get_codepoint GetCodepoint;
    rl_codepoint_to_utf8 CodepointToUTF8;
    rl_text_codepoints_to_utf8 TextCodepointsToUTF8;
    rl_text_copy TextCopy;
    rl_text_is_equal TextIsEqual;
    rl_text_length TextLength;
    rl_text_subtext TextSubtext;
    rl_text_replace TextReplace;
    rl_text_insert TextInsert;
    rl_text_join TextJoin;
    rl_text_split TextSplit;
    rl_text_append TextAppend;
    rl_text_find_index TextFindIndex;
    rl_text_to_upper TextToUpper;
    rl_text_to_lower TextToLower;
    rl_text_to_pascal TextToPascal;
    rl_text_to_integer TextToInteger;
    rl_draw_line_3d DrawLine3D;
    rl_draw_point_3d DrawPoint3D;
    rl_draw_circle_3d DrawCircle3D;
    rl_draw_triangle_3d DrawTriangle3D;
    rl_draw_triangle_strip_3d DrawTriangleStrip3D;
    rl_draw_cube DrawCube;
    rl_draw_cube_v DrawCubeV;
    rl_draw_cube_wires DrawCubeWires;
    rl_draw_cube_wires_v DrawCubeWiresV;
    rl_draw_cube_texture DrawCubeTexture;
    rl_draw_cube_texture_rec DrawCubeTextureRec;
    rl_draw_sphere DrawSphere;
    rl_draw_sphere_ex DrawSphereEx;
    rl_draw_sphere_wires DrawSphereWires;
    rl_draw_cylinder DrawCylinder;
    rl_draw_cylinder_ex DrawCylinderEx;
    rl_draw_cylinder_wires DrawCylinderWires;
    rl_draw_cylinder_wires_ex DrawCylinderWiresEx;
    rl_draw_plane DrawPlane;
    rl_draw_ray DrawRay;
    rl_draw_grid DrawGrid;
    rl_load_model LoadModel;
    rl_load_model_from_mesh LoadModelFromMesh;
    rl_unload_model UnloadModel;
    rl_unload_model_keep_meshes UnloadModelKeepMeshes;
    rl_get_model_bounding_box GetModelBoundingBox;
    rl_draw_model DrawModel;
    rl_draw_model_ex DrawModelEx;
    rl_draw_model_wires DrawModelWires;
    rl_draw_model_wires_ex DrawModelWiresEx;
    rl_draw_bounding_box DrawBoundingBox;
    rl_draw_billboard DrawBillboard;
    rl_draw_billboard_rec DrawBillboardRec;
    rl_draw_billboard_pro DrawBillboardPro;
    rl_upload_mesh UploadMesh;
    rl_update_mesh_buffer UpdateMeshBuffer;
    rl_unload_mesh UnloadMesh;
    rl_draw_mesh DrawMesh;
    rl_draw_mesh_instanced DrawMeshInstanced;
    rl_export_mesh ExportMesh;
    rl_get_mesh_bounding_box GetMeshBoundingBox;
    rl_get_mesh_tangents GenMeshTangents;
    rl_gen_mesh_poly GenMeshPoly;
    rl_get_mesh_plane GenMeshPlane;
    rl_gen_mesh_cube GenMeshCube;
    rl_mesh_sphere GenMeshSphere;
    rl_gen_mesh_hemi_sphere GenMeshHemiSphere;
    rl_gen_mesh_cylinder GenMeshCylinder;
    rl_gen_mesh_cone GenMeshCone;
    rl_gen_mesh_torus GenMeshTorus;
    rl_gen_mesh_knot GenMeshKnot;
    rl_gen_mesh_heightmap GenMeshHeightmap;
    rl_gen_mesh_cubicmap GenMeshCubicmap;
    rl_load_materials LoadMaterials;
    rl_load_material_default LoadMaterialDefault;
    rl_unload_material UnloadMaterial;
    rl_set_material_texture SetMaterialTexture;
    rl_set_model_mesh_material SetModelMeshMaterial;
    rl_load_model_animations LoadModelAnimations;
    rl_update_model_animation UpdateModelAnimation;
    rl_unload_model_animation UnloadModelAnimation;
    rl_unload_model_animations UnloadModelAnimations;
    rl_is_model_animation_valid IsModelAnimationValid;
    rl_check_collision_spheres CheckCollisionSpheres;
    rl_check_collision_boxes CheckCollisionBoxes;
    rl_check_collision_box_sphere CheckCollisionBoxSphere;
    rl_get_ray_collision_sphere GetRayCollisionSphere;
    rl_get_ray_collision_box GetRayCollisionBox;
    rl_get_ray_collision_mesh GetRayCollisionMesh;
    rl_get_ray_collision_triangle GetRayCollisionTriangle;
    rl_get_ray_collision_quad GetRayCollisionQuad;
    rl_init_audio_device InitAudioDevice;
    rl_close_audio_device CloseAudioDevice;
    rl_is_audio_device_ready IsAudioDeviceReady;
    rl_set_master_volume SetMasterVolume;
    rl_load_wave LoadWave;
    rl_load_wave_from_memory LoadWaveFromMemory;
    rl_load_sound LoadSound;
    rl_load_sound_from_wave LoadSoundFromWave;
    rl_update_sound UpdateSound;
    rl_unload_wave UnloadWave;
    rl_unload_sound UnloadSound;
    rl_export_wave ExportWave;
    rl_export_wave_as_code ExportWaveAsCode;
    rl_play_sound RL_PlaySound;
    rl_stop_sound StopSound;
    rl_pause_sound PauseSound;
    rl_resume_sound ResumeSound;
    rl_play_sound_multi PlaySoundMulti;
    rl_stop_sound_multi StopSoundMulti;
    rl_get_sounds_playing GetSoundsPlaying;
    rl_is_sound_playing IsSoundPlaying;
    rl_set_sound_volume SetSoundVolume;
    rl_set_sound_pitch SetSoundPitch;
    rl_set_sound_pan SetSoundPan;
    rl_wave_copy WaveCopy;
    rl_wave_crop WaveCrop;
    rl_wave_format WaveFormat;
    rl_load_wave_samples LoadWaveSamples;
    rl_unload_wave_samples UnloadWaveSamples;
    rl_load_music_stream LoadMusicStream;
    rl_load_music_stream_from_memory LoadMusicStreamFromMemory;
    rl_unload_music_stream UnloadMusicStream;
    rl_play_music_stream PlayMusicStream;
    rl_is_music_stream_playing IsMusicStreamPlaying;
    rl_update_music_stream UpdateMusicStream;
    rl_stop_music_stream StopMusicStream;
    rl_pause_music_stream PauseMusicStream;
    rl_resume_music_stream ResumeMusicStream;
    rl_seek_music_stream SeekMusicStream;
    rl_set_music_volume SetMusicVolume;
    rl_set_music_pitch SetMusicPitch;
    rl_set_music_pan SetMusicPan;
    rl_get_music_time_length GetMusicTimeLength;
    rl_get_music_time_played GetMusicTimePlayed;
    rl_load_audio_stream LoadAudioStream;
    rl_unload_audio_stream UnloadAudioStream;
    rl_update_audio_stream UpdateAudioStream;
    rl_is_audio_stream_processed IsAudioStreamProcessed;
    rl_play_audio_stream PlayAudioStream;
    rl_pause_audio_stream PauseAudioStream;
    rl_resume_audio_stream ResumeAudioStream;
    rl_is_audio_stream_playing IsAudioStreamPlaying;
    rl_stop_audio_stream StopAudioStream;
    rl_set_audio_stream_volume SetAudioStreamVolume;
    rl_set_audio_stream_pitch SetAudioStreamPitch;
    rl_set_audio_stream_pan SetAudioStreamPan;
    rl_set_audio_stream_buffer_size_default SetAudioStreamBufferSizeDefault;
    rl_set_audio_stream_callback SetAudioStreamCallback;
    rl_attach_audio_stream_processor AttachAudioStreamProcessor;
    rl_detach_audio_stream_processor DetachAudioStreamProcessor;
};

#endif
